import socket
import cv2
import numpy as np
import struct


PORT = 5000
NPORT = 5001

DATA_PATH = 'data'

def send_response(ip, packet):
    folder, file = packet.decode().strip().split(":", 1)

    cap = cv2.VideoCapture(f'{DATA_PATH}/{folder}/{file}')    

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((ip, 5000))
        
        #FLAG
        s.sendall(b'\x01')

        while True:
            flag, frame = cap.read()
            if not flag:
                break

            _, img = cv2.imencode('.jpg', frame)
            encoded = img.tobytes()

            be_frame_length = struct.pack('>I', len(encoded))
            s.sendall(be_frame_length)
            
            s.sendall(encoded)


def update_buffer(packet):
    frame = cv2.imdecode(np.frombuffer(packet, np.uint8), cv2.IMREAD_COLOR)
    cv2.imshow('Received Frame', frame)
    cv2.waitKey(5)

def start_inbound_handler():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('0.0.0.0', PORT))
    s.listen()

    while True:
        print('Listening...')
        conn, addr = s.accept()
        
        header = conn.recv(1)

        #REQUEST
        if header == b'\x00':
            print('request')
            # send_response(addr[0], payload)

        #RESPONSE
        elif header == b'\x01':
            while be_frame_length := conn.recv(4):
                frame_length = struct.unpack('>I', be_frame_length)[0]

                frame_encoded = bytearray()

                while chunk := conn.recv(frame_length - len(frame_encoded)):
                    frame_encoded += chunk

                img_array = np.frombuffer(frame_encoded, dtype=np.uint8)
                frame = cv2.imdecode(img_array, cv2.IMREAD_COLOR)

                cv2.imshow('Received Frame', frame)
                cv2.waitKey(41)

        #UNKNOWN
        else:
            print("No header found")

        conn.close()

start_inbound_handler()